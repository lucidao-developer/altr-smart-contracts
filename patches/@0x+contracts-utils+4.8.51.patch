diff --git a/node_modules/@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol b/node_modules/@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol
index 33cc9f2..600e9f6 100644
--- a/node_modules/@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol
+++ b/node_modules/@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol
@@ -23,147 +23,96 @@ import "./errors/LibRichErrorsV06.sol";
 import "./errors/LibSafeMathRichErrorsV06.sol";
 
 library LibSafeMathV06 {
-    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {
-        if (a == 0) {
-            return 0;
-        }
-        uint256 c = a * b;
-        if (c / a != b) {
-            LibRichErrorsV06.rrevert(
-                LibSafeMathRichErrorsV06.Uint256BinOpError(
-                    LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,
-                    a,
-                    b
-                )
-            );
-        }
-        return c;
-    }
-
-    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {
-        if (b == 0) {
-            LibRichErrorsV06.rrevert(
-                LibSafeMathRichErrorsV06.Uint256BinOpError(
-                    LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,
-                    a,
-                    b
-                )
-            );
-        }
-        uint256 c = a / b;
-        return c;
-    }
-
-    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {
-        if (b > a) {
-            LibRichErrorsV06.rrevert(
-                LibSafeMathRichErrorsV06.Uint256BinOpError(
-                    LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,
-                    a,
-                    b
-                )
-            );
-        }
-        return a - b;
-    }
-
-    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {
-        uint256 c = a + b;
-        if (c < a) {
-            LibRichErrorsV06.rrevert(
-                LibSafeMathRichErrorsV06.Uint256BinOpError(
-                    LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,
-                    a,
-                    b
-                )
-            );
-        }
-        return c;
-    }
-
-    function max256(uint256 a, uint256 b) internal pure returns (uint256) {
-        return a >= b ? a : b;
-    }
-
-    function min256(uint256 a, uint256 b) internal pure returns (uint256) {
-        return a < b ? a : b;
-    }
-
-    function safeMul128(uint128 a, uint128 b) internal pure returns (uint128) {
-        if (a == 0) {
-            return 0;
-        }
-        uint128 c = a * b;
-        if (c / a != b) {
-            LibRichErrorsV06.rrevert(
-                LibSafeMathRichErrorsV06.Uint256BinOpError(
-                    LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,
-                    a,
-                    b
-                )
-            );
-        }
-        return c;
-    }
-
-    function safeDiv128(uint128 a, uint128 b) internal pure returns (uint128) {
-        if (b == 0) {
-            LibRichErrorsV06.rrevert(
-                LibSafeMathRichErrorsV06.Uint256BinOpError(
-                    LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,
-                    a,
-                    b
-                )
-            );
-        }
-        uint128 c = a / b;
-        return c;
-    }
-
-    function safeSub128(uint128 a, uint128 b) internal pure returns (uint128) {
-        if (b > a) {
-            LibRichErrorsV06.rrevert(
-                LibSafeMathRichErrorsV06.Uint256BinOpError(
-                    LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,
-                    a,
-                    b
-                )
-            );
-        }
-        return a - b;
-    }
-
-    function safeAdd128(uint128 a, uint128 b) internal pure returns (uint128) {
-        uint128 c = a + b;
-        if (c < a) {
-            LibRichErrorsV06.rrevert(
-                LibSafeMathRichErrorsV06.Uint256BinOpError(
-                    LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,
-                    a,
-                    b
-                )
-            );
-        }
-        return c;
-    }
-
-    function max128(uint128 a, uint128 b) internal pure returns (uint128) {
-        return a >= b ? a : b;
-    }
-
-    function min128(uint128 a, uint128 b) internal pure returns (uint128) {
-        return a < b ? a : b;
-    }
-
-    function safeDowncastToUint128(uint256 a) internal pure returns (uint128) {
-        if (a > type(uint128).max) {
-            LibRichErrorsV06.rrevert(
-                LibSafeMathRichErrorsV06.Uint256DowncastError(
-                    LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,
-                    a
-                )
-            );
-        }
-        return uint128(a);
-    }
+	function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {
+		if (a == 0) {
+			return 0;
+		}
+		uint256 c = a * b;
+		if (c / a != b) {
+			LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW, a, b));
+		}
+		return c;
+	}
+
+	function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {
+		if (b == 0) {
+			LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO, a, b));
+		}
+		uint256 c = a / b;
+		return c;
+	}
+
+	function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {
+		if (b > a) {
+			LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW, a, b));
+		}
+		return a - b;
+	}
+
+	function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {
+		uint256 c = a + b;
+		if (c < a) {
+			LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW, a, b));
+		}
+		return c;
+	}
+
+	function max256(uint256 a, uint256 b) internal pure returns (uint256) {
+		return a >= b ? a : b;
+	}
+
+	function min256(uint256 a, uint256 b) internal pure returns (uint256) {
+		return a < b ? a : b;
+	}
+
+	function safeMul128(uint128 a, uint128 b) internal pure returns (uint128) {
+		if (a == 0) {
+			return 0;
+		}
+		uint128 c = a * b;
+		if (c / a != b) {
+			LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW, a, b));
+		}
+		return c;
+	}
+
+	function safeDiv128(uint128 a, uint128 b) internal pure returns (uint128) {
+		if (b == 0) {
+			LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO, a, b));
+		}
+		uint128 c = a / b;
+		return c;
+	}
+
+	function safeSub128(uint128 a, uint128 b) internal pure returns (uint128) {
+		if (b > a) {
+			LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW, a, b));
+		}
+		return a - b;
+	}
+
+	function safeAdd128(uint128 a, uint128 b) internal pure returns (uint128) {
+		uint128 c = a + b;
+		if (c < a) {
+			LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW, a, b));
+		}
+		return c;
+	}
+
+	function max128(uint128 a, uint128 b) internal pure returns (uint128) {
+		return a >= b ? a : b;
+	}
+
+	function min128(uint128 a, uint128 b) internal pure returns (uint128) {
+		return a < b ? a : b;
+	}
+
+	function safeDowncastToUint128(uint256 a) internal pure returns (uint128) {
+		if (a > (2 ** 128 - 1)) {
+			LibRichErrorsV06.rrevert(
+				LibSafeMathRichErrorsV06.Uint256DowncastError(LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128, a)
+			);
+		}
+		return uint128(a);
+	}
 }
